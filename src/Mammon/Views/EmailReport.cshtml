@model Mammon.Models.Views.CostCentreReportModel

<html>
<head>
	<style>
		html * {
			font-family: Arial, sans-serif;
		}

		.dateRow {
			font-size: 15px
		}

		.level-0 {
			color: darkblue;
			font-size: 20px;
			font-weight: bold;
			padding-top: 0.5em;
		}

		.currency {
			text-align: right;	
		}		

		.level-1 {
			padding-left: .5em;
			font-weight: bold;
		}		

		.level-2 {
			padding-left: 1.5em;
		}

		.level-3 {
			padding-left: 3em;
		}

		.level-4 {
			padding-left: 4.5em;
		}
	</style>
</head>
<body>
@{
#if DEBUG || INTTEST
    ;
    <h1>This is an integration test report</h1>
#endif
}

	<h1>Cost Breakdown</h1>
	<p class="dateRow">From : @Model.ReportFromDateTime.ToString("dd/MM/yyyy") (inclusive) To: @Model.ReportToDateTime.ToString("dd/MM/yyyy") (inclusive)</p>
	@{
		RenderNode(null, Model.Root);
	}
</body>
</html>

@functions {

	private string GetNodeForLevel(int level)
	{
		switch (level)
		{
			case 1:
				return "• ";
			case 2:
				return "› ";
			case 3:
				return "» ";
			default:
				return "";
		}
	}

	private void RenderNode(string? nodeName, CostCentreReportNode node, int level = 0)
	{
		if (node.Type!= CostCentreReportNodeType.Root)
		{
			<p class="level-@(level)">@GetNodeForLevel(level)@nodeName<span class="currency"> @node.NodeTotal.ToString()</span></p>
		}

		@foreach (var subNode in node.SubNodes)
		{
			RenderNode(subNode.Key, subNode.Value, node.Type== CostCentreReportNodeType.Root? level :  level + 1);
		}
		@foreach (var leaf in node.Leaves)
		{
			<p class="level-@(level+1)">@leaf.Value.Name<span class="currency"> @leaf.Value.Cost</span></p>
		}
	}
}